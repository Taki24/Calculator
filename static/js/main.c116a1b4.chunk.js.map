{"version":3,"sources":["components/Button.jsx","components/ApiButtons.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","state","clicked","startAnimation","bind","this","setState","prevState","className","props","name","onClick","setTimeout","handleClick","children","style","shadowAnimation","animation","React","Component","ApiButtons","num","temp","number","reloadNumber","fetch","then","res","console","log","json","data","reload","saveNumber","App","addToInput","value","input","length","handleEqual","isNaN","charAt","evaluate","toFixed","toString","err","handleDelete","slice","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c116a1b4.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Button.css'\r\n\r\nclass Button extends React.Component {\r\n   constructor(){\r\n      super();\r\n      this.state = {\r\n         clicked: false\r\n      }\r\n      this.startAnimation = this.startAnimation.bind(this);\r\n   }\r\n\r\n   startAnimation(){\r\n      this.setState(prevState => {\r\n         return {\r\n            clicked: true\r\n         }\r\n      });\r\n   }\r\n\r\n   render(){\r\n      return (\r\n         <div className={\"button \" + this.props.name}\r\n            onClick={() => {\r\n               this.setState({clicked: true});\r\n               setTimeout(() => {\r\n                  this.setState({clicked: false});\r\n               }, 500);\r\n               return this.props.handleClick(this.props.children);\r\n            }}\r\n            style={this.state.clicked ? shadowAnimation : {animation: \"none\"}}\r\n         >\r\n            {this.props.children}\r\n         </div>\r\n      )\r\n   }\r\n}\r\n\r\nconst shadowAnimation = {\r\n   animation: \"shadowFadeOut 0.8s forwards\"\r\n}\r\n\r\nexport default Button\r\n","import React from 'react'\r\nimport './ApiButtons.css'\r\n\r\nclass ApiButtons extends React.Component {\r\n   constructor(props){\r\n      super(props);\r\n      this.state = {\r\n         num: \"Reload\",\r\n         temp: props.number\r\n      }\r\n      this.reloadNumber = this.reloadNumber.bind(this);\r\n   }\r\n\r\n   saveNumber(){\r\n      // const temp = this.state.temp;\r\n      // const fs = require(\"fs\");\r\n      // fs.writeFile(\"saveNumber.txt\", (temp, err) => {\r\n      //    if(err) throw err;\r\n      // });\r\n   }\r\n\r\n   reloadNumber(){\r\n      fetch('/api/loadNumber')\r\n         .then(res => {\r\n            console.log(res);\r\n            return res.json();\r\n         })\r\n         .then(data => this.props.reload(data.number));\r\n   }\r\n\r\n   render(){\r\n      return(\r\n         <div className=\"api-button-container\">\r\n            <div className=\"api-button\" onClick={this.saveNumber}>Save</div>\r\n            <div className=\"api-button\" onClick={this.reloadNumber}>{this.state.num}</div>\r\n         </div>\r\n      )\r\n   }\r\n}\r\n\r\nexport default ApiButtons\r\n","import React from 'react'\nimport './App.css'\nimport Button from './components/Button'\nimport ApiButtons from './components/ApiButtons'\nimport { evaluate } from 'mathjs'\n\nclass App extends React.Component {\n   constructor(){\n      super();\n      this.state = {\n         input: ''\n      }\n   }\n\n   addToInput = value => {\n      (this.state.input.length < 12) &&\n      this.setState({\n         input: this.state.input + value\n      });\n   }\n\n   handleEqual = () => {\n      try {\n         if(isNaN(this.state.input.charAt(this.state.input.length-1))\n            || this.state.input === '')   return;\n\n         let res = evaluate(this.state.input).toFixed(3);\n         this.setState({\n            input: res.toString()\n         });\n      }\n      catch(err){\n         console.log(err);\n      }\n   }\n\n   handleDelete = () => {\n      if(this.state.input.length > 0){\n         this.setState({\n            input: this.state.input.slice(0, this.state.input.length - 1)\n         });\n      }\n      return;\n   }\n\n   reloadNumber = (num) => {\n      this.setState({input: num});\n   }\n\n   render(){\n     return (\n      <div className=\"app\">\n      <div className=\"calculator-container\">\n         <div className=\"calculator\">\n            <div className=\"input\">{this.state.input}</div>\n            <div className=\"row\">\n               <Button handleClick={() => this.setState({input: \"\"})} name=\"func wider\">Clear</Button>\n               <Button handleClick={this.handleDelete} name=\"func\">Del</Button>\n               <Button handleClick={this.addToInput} name=\"operator\">/</Button>\n            </div>\n            <div className=\"row\">\n               <Button handleClick={this.addToInput} name=\"number\">7</Button>\n               <Button handleClick={this.addToInput} name=\"number\">8</Button>\n               <Button handleClick={this.addToInput} name=\"number\">9</Button>\n               <Button handleClick={this.addToInput} name=\"operator\">*</Button>\n            </div>\n            <div className=\"row\">\n               <Button handleClick={this.addToInput} name=\"number\">4</Button>\n               <Button handleClick={this.addToInput} name=\"number\">5</Button>\n               <Button handleClick={this.addToInput} name=\"number\">6</Button>\n               <Button handleClick={this.addToInput} name=\"operator\">-</Button>\n            </div>\n            <div className=\"row\">\n               <Button handleClick={this.addToInput} name=\"number\">1</Button>\n               <Button handleClick={this.addToInput} name=\"number\">2</Button>\n               <Button handleClick={this.addToInput} name=\"number\">3</Button>\n               <Button handleClick={this.addToInput} name=\"operator\">+</Button>\n            </div>\n            <div className=\"row\">\n               <Button handleClick={this.addToInput} name=\"number wider\">0</Button>\n               <Button id=\"dot\" handleClick={this.addToInput} name=\"dot\">.</Button>\n               <Button handleClick={() => this.handleEqual()} name=\"equals\">=</Button>\n            </div>\n         </div>\n         <ApiButtons reload={this.reloadNumber} number={this.state.input} />\n      </div>\n      </div>\n     );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}